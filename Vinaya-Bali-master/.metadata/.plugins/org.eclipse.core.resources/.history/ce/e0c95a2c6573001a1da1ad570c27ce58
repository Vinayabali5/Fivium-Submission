package com.fivium.recruitment.controller;

import com.fivium.recruitment.service.StringParsingService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import java.util.Collections;
import java.util.Arrays;
import java.io.*; 
import java.util.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

@RestController
public class StringController {

  private final StringParsingService stringParsingService;

  public StringController(StringParsingService stringParsingService) {
    this.stringParsingService = stringParsingService;
  }

  @GetMapping("/reverse")
  public String reverseString(@RequestParam("input") String input) {
    return stringParsingService.reverseString(input);
  }
  
//  @GetMapping("/unique-string")
//  public Map<String, Integer> uniqueString(@RequestParam("input") String input) {
//	  String s = input;
//	    List<String> output = new ArrayList<>();
//	    List<Integer> count = new ArrayList<>();
//	    stringParsingService.findWords(s, output, count);
//	    Map<String, Integer> table = new Hashtable<>(); 
//	    table.put(output, count);
//	    return table;
//	    } 
  
  @GetMapping("/unique-word")
  public void uniqueWord(@RequestParam("input") String input, Integer count) {
	  String text = input;
	  List<String> list = Arrays.asList(text.split(" "));
	  
      Set<String> uniqueWords = new HashSet<String>(list);
      for (String word : uniqueWords) {
          System.out.println(word + ": " + Collections.frequency(list, word));
      }
	    } 
		
  @GetMapping("/unique")
  public Map<String, Integer> uniqueWordString(@RequestParam("input") String input) {
	  String testStr = input;
	  return countAndPrintRepeatedWordOccurences(testStr);	  
  }
  
  public static void countAndPrintRepeatedWordOccurences(
          String strContent) {

      // Step 1: create Map of String-Integer
      Map<String, Integer> mapOfRepeatedWord = 
              new HashMap<String, Integer>();

      // Step 2: split line using space as delimiter
      String[] words = strContent.split(" ");

      // Step 3: iterate through String[] array
      for(String word : words) {

          // Step 4: convert all String into lower case, 
          // before comparison
          String tempUCword = word.toLowerCase();

          // Step 5: check whether Map contains particular word 
          if(mapOfRepeatedWord.containsKey(tempUCword)){

              // Step 6: If contains, increase count value by 1
              mapOfRepeatedWord.put(tempUCword, 
                      mapOfRepeatedWord.get(tempUCword) + 1);
          } 
          else {

              // Step 7: otherwise, make a new entry
              mapOfRepeatedWord.put(tempUCword, 1);
          }
      }

      System.out.println("Before sorting : \n");
      System.out.println("Words" + "\t\t" + "Count");
      System.out.println("======" + "\t\t" + "=====");

      // Step 8: print word along with its count
      for(Map.Entry<String, Integer> entry : 
          mapOfRepeatedWord.entrySet()){
          System.out.println(entry.getKey() 
                  + "\t\t" + entry.getValue());
      }

      // Step 9: Sorting logic by invoking sortByCountValue()
      Map<String, Integer> wordLHMap = sortByCountValue(
              mapOfRepeatedWord);

      System.out.println("\n\nAfter sorting"
              + " in descending order of count : \n");
      System.out.println("Words" + "\t\t" + "Count");
      System.out.println("======" + "\t\t" + "=====");

      // Step 10: Again print after sorting
      for(Map.Entry<String, Integer> entry : 
          wordLHMap.entrySet()) {
          System.out.println(entry.getKey() 
                  + "\t\t" + entry.getValue());
      }
  }
  
	  public static Map<String, Integer> sortByCountValue(Map<String, Integer> mapOfRepeatedWord) {
	 
	        // get entrySet from HashMap object
	        Set<Map.Entry<String, Integer>> setOfWordEntries = 
	                mapOfRepeatedWord.entrySet();
	 
	        // convert HashMap to List of Map entries
	        List<Map.Entry<String, Integer>> listOfwordEntry = 
	                new ArrayList<Map.Entry<String, Integer>>(
	                        setOfWordEntries);
	 
	        // sort list of entries using Collections.sort(ls, cmptr);
	        Collections.sort(listOfwordEntry, 
	                new Comparator<Map.Entry<String, Integer>>() {
	 
	            @Override
	            public int compare(Entry<String, Integer> es1, 
	                    Entry<String, Integer> es2) {
	                return es2.getValue().compareTo(es1.getValue());
	            }
	        });
	 
	        // store into LinkedHashMap for maintaining insertion
	        Map<String, Integer> wordLHMap = 
	                new LinkedHashMap<String, Integer>();
	 
	        // iterating list and storing in LinkedHahsMap
	        for(Map.Entry<String, Integer> map : listOfwordEntry){
	            wordLHMap.put(map.getKey(), map.getValue());
	        }
	 
	        return wordLHMap;
	    }


}
