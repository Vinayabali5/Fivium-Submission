package com.fivium.recruitment.controller;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.fivium.recruitment.service.StringParsingService;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

@RunWith(SpringRunner.class)
@WebMvcTest(StringController.class)
public class StringControllerTest {

  @Autowired
  private MockMvc mockMvc;

  @MockBean
  private StringParsingService stringParsingService;

  @Test
  public void testReverseEndpoint() throws Exception {
    String inputString = "abc";
    String expectedResult = "cba";

    when(stringParsingService.reverseString(inputString)).thenReturn(expectedResult);

    mockMvc.perform(get("/reverse").param("input", inputString))
        .andExpect(status().isOk())
        .andExpect(content().string(expectedResult));
  }

  @Test
  public void testSingleStringEndpoint() throws Exception {
    String singleString = "banana frog banana";

    when(stringParsingService.singleString(inputString)).thenReturn(expectedResult);

    mockMvc.perform(get("/single-string").param("input", singleString))
        .andExpect(status().isOk());
  }
}
